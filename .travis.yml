# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.stack
  - $HOME/.cabsnap
  - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar
  - test -n "$STACK_ARGS" && cp -a $HOME/.ghc $HOME/.cabsnap/ghc || true

matrix:
  include:
  - env: STACK_ARGS="--resolver lts-5"
    compiler: ": #stackage lts-5 (ghc-7.10.3)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver lts-6"
    compiler: ": #stackage lts-6 (ghc-7.10.3)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver lts-7"
    compiler: ": #stackage lts-7 (ghc-8.0.1)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver lts-8"
    compiler: ": #stackage lts-8 (ghc-8.0.2)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver lts-9"
    compiler: ": #stackage lts-9 (ghc-8.0.2)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver lts-10"
    compiler: ": #stackage lts-10 (ghc-8.2.2)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver lts-11"
    compiler: ": #stackage lts-11 (ghc-8.2.2)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver lts-12"
    compiler: ": #stackage lts-12 (ghc-8.4.4)"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: STACK_ARGS="--resolver nightly"
    compiler: ": #stackage nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: CABALVER=1.24 GHCVER=7.10.3
    compiler: ": #GHC 7.10.3"
    addons: {apt: {packages: [cabal-install-1.24,ghc-7.10.3], sources: [hvr-ghc]}}

  - env: CABALVER=1.24 GHCVER=8.0.2
    compiler: ": #GHC 8.0.2"
    addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}

  - env: CABALVER=2.0 GHCVER=8.2.2
    compiler: ": #GHC 8.2.2"
    addons: {apt: {packages: [cabal-install-2.0,ghc-8.2.2], sources: [hvr-ghc]}}

  - env: CABALVER=2.2 GHCVER=8.4.4
    compiler: ": #GHC 8.4.4"
    addons: {apt: {packages: [cabal-install-2.2,ghc-8.4.4], sources: [hvr-ghc]}}

  - env: CABALVER=2.4 GHCVER=8.6.2
    compiler: ": #GHC 8.6.2"
    addons: {apt: {packages: [cabal-install-2.4,ghc-8.6.2], sources: [hvr-ghc]}}

  - env: CABALVER=head GHCVER=head
    compiler: ": #GHC HEAD"
    addons: {apt: {packages: [cabal-install-head,ghc-head], sources: [hvr-ghc]}}

  allow_failures:
  - env: CABALVER=head GHCVER=head
  - env: STACK_ARGS="--resolver nightly"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
- export PATH=$HOME/.local/bin:$PATH
- mkdir -p ~/.local/bin

# Download and unpack the stack executable
- |
  test -n "$STACK_ARGS" || return 0
  travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'

  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config
  stack --no-terminal $STACK_ARGS setup
  echo "$(stack $STACK_ARGS ghc -- --version) [$(stack $STACK_ARGS ghc -- --print-project-git-commit-id 2> /dev/null || echo '?')]"

install:
- |
  test -n "$CABALVER" || return 0
  cabal --version
  echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
  then
    zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz > \
         $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
  fi
  travis_retry cabal update -v
  sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
  cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
  sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

  # check whether current requested install-plan matches cached package-db snapshot
  if diff -u $HOME/.cabsnap/installplan.txt installplan.txt;
  then
    echo "cabal build-cache HIT";
    rm -rfv .ghc;
    cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
    cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
  else
    echo "cabal build-cache MISS";
    rm -rf $HOME/.cabsnap;
    mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
    cabal install --only-dependencies --enable-tests --enable-benchmarks;
  fi

  # snapshot package-db on cache miss
  if [ ! -d $HOME/.cabsnap ];
  then
    echo "snapshotting package-db to build-cache";
    mkdir $HOME/.cabsnap;
    cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
    cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
  fi

- |
  test -n "$STACK_ARGS" || return 0
  [ -d $HOME/.cabsnap/ghc ] && cp -a $HOME/.cabsnap/ghc $HOME/.ghc || true



script:
- if test -n "$STACK_ARGS" ; then stack --no-terminal $STACK_ARGS test --bench --only-dependencies ; fi
- if test -n "$STACK_ARGS" ; then stack --no-terminal $STACK_ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps ; fi

- if test -n "$CABALVER" -a -f configure.ac ; then autoreconf -i ; fi
- if test -n "$CABALVER" ; then cabal configure --enable-tests --enable-benchmarks -v2 ; fi  # -v2 provides useful information for debugging
- if test -n "$CABALVER" ; then cabal build ; fi   # this builds all libraries and executables (including tests/benchmarks)
- if test -n "$CABALVER" ; then cabal test ; fi
- if test -n "$CABALVER" ; then cabal check ; fi
- if test -n "$CABALVER" ; then cabal sdist ; fi  # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
- if test -n "$CABALVER" ; then SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz && (cd dist && cabal install --force-reinstalls "$SRC_TGZ") ; fi
